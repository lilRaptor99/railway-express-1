// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId        String                     @id @default(uuid())
  email         String                     @unique
  password      String
  firstName     String
  lastName      String
  phoneNumber   String
  nic           String
  address       String?
  station       Station?                   @relation(fields: [stationId], references: [stationId])
  role          Role                       @default(PASSENGER)
  stationId     String?
  initialLogIn  Boolean                    @default(true)
  createdAt     DateTime                   @default(now())
  status        Status                     @default(ACTIVE)
  ReasonToBlock ReasonToBlock[]
  Complaints    ComplaintsAndSuggestions[]
  Ticket        Ticket[]
}

enum Role {
  ADMIN
  PASSENGER
  CONTROL_OFFICER
  TICKETING_OFFICER
  TICKET_CHECKER
}

enum Status {
  ACTIVE
  BANNED
}

model Station {
  stationId                String                @id
  name                     String
  address                  String
  phoneNumber              String
  location                 String
  adjacentTo               Station[]             @relation("AdjacentStations")
  adjacentFrom             Station[]             @relation("AdjacentStations")
  User                     User[]
  CrewMember               CrewMember[]
  IntermediateStation      IntermediateStation[]
  ticketStartStation       Ticket[]              @relation("ticketStartStation")
  ticketDestinationStation Ticket[]              @relation("ticketDestinationStation")
}

model CrewMember {
  userId                        String          @id @default(uuid())
  firstName                     String
  lastName                      String
  phoneNumber                   String
  nic                           String          @unique
  address                       String?
  station                       Station         @relation(fields: [stationId], references: [stationId])
  occupation                    Occupation
  stationId                     String
  visibility                    Visibility      @default(VISIBLE)
  TrainSchedule_headGuard       TrainSchedule[] @relation("headGuard")
  TrainSchedule_underGuard      TrainSchedule[] @relation("underGuard")
  TrainSchedule_driver          TrainSchedule[] @relation("driver")
  TrainSchedule_driverAssistant TrainSchedule[] @relation("driverAssistant")
}

enum Occupation {
  DRIVER
  DRIVER_ASSISTANT
  HEAD_GUARD
  UNDER_GUARD
}

enum Visibility {
  HIDDEN
  VISIBLE
}

model ReasonToBlock {
  userId String @id
  user   User   @relation(fields: [userId], references: [userId])
  reason String
}

model TrainTurn {
  turnNumber           Int                   @id
  turnName             String
  reservable           Boolean
  location             String                @default("6.933957704555925, 79.84995215472523")
  availability         TrainTurnAvailability @default(DAILY)
  type                 TrainTurnType         @default(SLOW)
  intermediateStations IntermediateStation[]
  trainCompartments    TrainCompartment[]
  TrainSchedule        TrainSchedule[]
}

model TrainCompartment {
  trainTurn         TrainTurn             @relation(fields: [turnNumber], references: [turnNumber])
  turnNumber        Int
  compartmentNumber String
  seatCount         Int
  class             TrainReservationClass @default(THIRD_CLASS)

  @@id([turnNumber, compartmentNumber])
}

model IntermediateStation {
  stationId     String
  station       Station   @relation(fields: [stationId], references: [stationId])
  arrivalTime   String?
  departureTime String?
  isStart       Boolean
  isEnd         Boolean
  trainTurn     TrainTurn @relation(fields: [turnNumber], references: [turnNumber])
  turnNumber    Int

  @@id([turnNumber, stationId])
}

enum TrainTurnAvailability {
  SO
  NS
  NSU
  DAILY
}

enum TrainTurnType {
  SLOW
  EXPRESS
  INTERCITY
}

enum TrainReservationClass {
  FIRST_CLASS
  SECOND_CLASS
  THIRD_CLASS
}

model ComplaintsAndSuggestions {
  complaintId String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [userId])
  createdAt   DateTime @default(now())
  title       String
  description String
  isComplaint Boolean
}

model Ticket {
  ticketId             String                @id @default(uuid())
  userId               String?
  user                 User?                 @relation(fields: [userId], references: [userId])
  createdAt            DateTime              @default(now())
  returnStatus         Boolean               @default(false)
  price                Float
  ticketClass          TrainReservationClass @default(THIRD_CLASS)
  email                String?
  phoneNumber          String?
  ticketStatus         TicketStatus          @default(UNUSED)
  ticketType           TicketType            @default(NORMAL)
  startStationId       String?
  startStation         Station?              @relation("ticketStartStation", fields: [startStationId], references: [stationId])
  destinationStationId String?
  destinationStation   Station?              @relation("ticketDestinationStation", fields: [destinationStationId], references: [stationId])
  Reservation          Reservation?
  name                 String?
  validPeriod          Int?
}

enum TicketStatus {
  UNUSED
  EXPIRED
  USED
  USED_ONE_WAY
}

enum TicketType {
  NORMAL
  RESERVATION
  SEASON
}

model TrainSchedule {
  trainScheduleId       String          @id @default(uuid())
  trainTurn             TrainTurn       @relation(fields: [turnNumber], references: [turnNumber])
  turnNumber            Int
  date                  DateTime
  cancelled             Boolean         @default(false)
  delayed               Boolean         @default(false)
  delayTime             String?
  headGuard             CrewMember?     @relation("headGuard", fields: [headGuardUserId], references: [userId])
  headGuardUserId       String?
  underGuard            CrewMember?     @relation("underGuard", fields: [underGuardUserId], references: [userId])
  underGuardUserId      String?
  driver                CrewMember?     @relation("driver", fields: [driverUserId], references: [userId])
  driverUserId          String?
  driverAssistant       CrewMember?     @relation("driverAssistant", fields: [driverAssistantUserId], references: [userId])
  driverAssistantUserId String?
  ReservedSeats         ReservedSeats[]
  Reservation           Reservation[]

  @@unique([turnNumber, date])
}

model ReservedSeats {
  trainSchedule     TrainSchedule      @relation(fields: [trainScheduleId], references: [trainScheduleId])
  trainScheduleId   String
  compartmentNumber String
  seatNumber        Int
  status            ReservedSeatStatus @default(AVAILABLE)

  @@id([trainScheduleId, compartmentNumber, seatNumber])
}

enum ReservedSeatStatus {
  AVAILABLE // Seat is free
  UNAVAILABLE // Seat is in the process of reservation
  RESERVED
}

model Reservation {
  reservationId              String        @id
  ticket                     Ticket        @relation(fields: [reservationId], references: [ticketId])
  primaryPassengerName       String
  passengerNICs              String[]
  reservedSeats              String[]
  reservationTrainSchedule   TrainSchedule @relation(fields: [reservationTrainScheduleId], references: [trainScheduleId])
  reservationTrainScheduleId String
}
